== Statements: ==

<body> is a sequence of <statement>s and <content>s.
The whole document is a <body>.
<statement>s are enclosed in |_| or |_\n and may contain <expr>essions and <name>s.
Newlines (\n) may be escaped explicitly with \ or with ; in places valid for a ;.
Block and multi-block statements have their inner <body>.
<content> is any plain text outside of <statement>s.

Block statements:
    [:<statement>:] <body> [:end:]
Multi-block statements:
    [:<statement>:] <body> [:<statement>:] <body> ([:<statement>:] <body> (...)) [:end:]
Single statements:
    [:<statement>:]

Condition: (multi-block)
    [:if <expr>:]
    [:elif <expr>:]
    [:else <expr>:]

Loop: (block)
    [:for <name>(, <name>) in <expr>:]

Declaration: (block)
    [:let <name> = <expr>(; <name> = <expr>(; ...)):]

Injection: (single)
    [:= <expr>:]

== Expressions: ==

-- Literals: --

All JSON literals are allowed:

Null:
    null

Boolean:
    true
    false

Number:
    4.2e5
    4.2E5
    ...
    (Prefix + and - are parsed as operators.)

Numbers are stored as either integer or floating point numbers.

Array:
    []
    [1]
    [1, 2, 3]
    ...

Object:
    {}
    {"foo": "bar"}
    {"foo": "bar", "baz": "boo"}
    ...

Array and object literals may contain arbitrary expressions as both keys and values.
Keys are converted to strings:

{1+2: 3*4} -> {"3": 12}

-- Boolean operations:

!, &&, ||

Short-circuit truthy/falsey evaluation as in JS. -- TODO

-- Number operations:

+, -, *, /, //, %, **

Converts operands to Numbers.
Result of +, -, *, //, %, and ** stays integral on integral operands.
Result of / is always floating.

-- Array/object access: --

[1, 2, 3][1]
{"foo": "bar"}["foo"]

Converts operand to Number (rounds floating point numbers) or String.

-- Array/object/string concatenation: --

"lorem" ++ "ipsum"                   -> "loremipsum"
[1, 2] ++ [3, 4]                     -> [1, 2, 3, 4]
{"a": 1, "b": 2} ++ {"a": 3, "c": 4} -> {"a": 3, "b": 2, "c": 4}

-- Comparison: --

==, !=

Strict (in)equality without type conversion.
    
<, <=, >, >=

Converts operands to Numbers.

-- Names: --

[a-zA-Z_][a-zA-Z0-9_]*

-- Built-in names: --

data - the data attached in JSON format.

== Conversions: ==

Boolean:
    null -> false
    0    -> false
    ""   -> false
    []   -> false
    {}   -> false
    ...  -> true

Number:
    null  -> 0
    false -> 0
    true  -> 1
    str   -> length(str)
    arr   -> length(arr)
    obj   -> length(obj)

String:
    visual string representation

Array:
    obj -> values(obj)
    ... -> []

Object:
    arr -> entries(arr)
    ... -> {}

== Examples: ==

[:if showFoo:]
    foo
[:end:]

[:if show == "foo":]
    foo
[:elif show == "bar":]
    bar
[:else:]
    [:if baz:]
        baz
    [:else:]
        boo
    [:end:]
[:end:]

[:=show:]

[:let a = list[0]; b = list[1]:]
    [:=a:]
    [:=b:]
[:end:]

[:for elem in list:]
    [:if elem == "foo":]
        FOO
    [:else:]
        [:=elem:]
    [:end:]
[:end:]

| for elem in list
|   if elem == "foo"
      FOO
|   else
|     =elem
|   end
| end

[:for value in object:]
    [:=value:]
[:end:]

[:for key, value in object:]
    [:=key:]
    [:=value:]
[:end:]

[let a = 5]
    [=a + 1]
[end]

== Global data: ==

Additional "global" data may be provided to the preprocessor.
It may be of any of the above mentioned types.
The parsing tools provided here accept a string of arbitrary expression,
that is then parsed into this global data object.
The global data is accessed in the preprocessor code from the predefined `data` variable.
`data` is simply a variable, not a keyword, so it may be shadowed by any declaration.
